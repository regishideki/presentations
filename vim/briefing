add in your vimrc if you want:
map <Leader>x :exec getline(".")<cr>
echo "Hello World"

# Visual Mode
Usually not necessary

Exceptions:
- Doing something in a few lines
let a = 1
let b = 10
let c = 100000

- Copy and replace
lead_id = 1
application_id = 2

PreQualification.new(application_id)

warning: it causes side effect

- Restricting a command

let a = 1
let b = 10
let c = 100000


# Dot Command
It is like mini macros

Ex:
let a = 1
let b = 10
let c = 100000


# Find/Replace
- c tag to confirm, last search, dot command
att
pattern
att

- e tag and gn command
att
atts

\v at the beginning when working with regex
\zs start of the match
def (a, b)

\ze end of the match
\s match space or tab
\_s match space, tab or new line


# Ex Commands
- all normal commands: yank, delete, move, print, etc

- Example using normal mode to append something at the end of a line

:63,65norm A;
let a = 1
let b = 10
let c = 100000


# Global Commands

Examples:
- append missing ";" add the end of the lets:

let a = 1
let b = 10;
let c = 100000

:73,75g/let .*[^;]$/norm A;

perform something between two patterns
:g/^startlist/+1,/^endlist/-1 sort

startlist
  'grape'
  'coconut'
  'banana'
  'strawberry',
  'lemon'
endlist

startlist
  'France'
  'Brazil'
  'Japan'
  'Senegal'
  'Australia'
endlist

Using register append to copy a series of lines
defining a range relative to pattern

reset register a: qaq
/\vdocument_upload_url\(\zs'\w*'\ze\)

attribute :appraisal_upload_url do
  document_upload_url('appraisal')
end

attribute :other_vehicle_documents_upload_url do
  document_upload_url('other_vehicle_documents')
end

attribute :vehicle_inqueries_upload_url do
  document_upload_url('vehicle_inqueries')
end

global!, globalv or only v: do with the lines that
does not match the pattern

# Macros
recording a macro: q<register><commands>q
executing a macro: @<register>
executing last macro: @@

Example:
Introducing a new module level in Ruby
Series of numbers



Examples:
- with default
- with dot command
- with gn

# argdo, cfdo, etc















# Marks
m<letter> add a mark
`<letter> go to mark
'<letter> first no blank character of mark

lower case: specific to a buffer
upper case: all buffers

automatic marks
_ first non-blank character
gv last visual selection
gi last inserting

# Registers
:reg
list of registers

using:
lower case: new register
upper case: append register
"<register><operation>

access:
"<register>p in normal mode
<C-r><register> in insert mode
@<register> in Ex Mode to pass a register as reference (not value)

special registers:
" unnamed register
0 yank register
1-9 history of changes and deletions
_d blackhole
+ clipboard (cut, copy, paste - OS specific)
* primary (middle mouse button - OS specific)
= expression register (usefull only in insert mode with <C-r>=
% name of the current file
# name of alternate file
. last inserted text
: last ex command
/ last search pattern


we can use it with Ex Commands:
:delete <register>
:put <register>
etc


# Others
<C-a> increase a number
<C-x> decrease a number
application1 = FactoryGirl.create(:application)

xp transpose character
Matehus

substitute a word to another:
lead_id = 1
app_id = 2
PreQualification.new.run(lead_id)
Eligibility.new.run(app_id)

options:
using blackhole register
using yank register
using visual selection (has a side-effect)
using ciw<C-r>0<Esc> (saves in dot command)

