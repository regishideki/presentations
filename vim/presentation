# Introduction
Source: Practical Vim: Edit Text at the Speed of Thought - Drew Neil

To run some commands easily:
map <Leader>x :exec getline(".")<cr>

Example:
echo 1 + 2


# Registers
:reg
list of registers

storing:
"{register}{operation}
lower case: new register
upper case: append register

accessing:
"{register}p in normal mode
<C-r>{register} in insert mode, ex mode, etc
@{register} in Ex Mode to pass a register as reference (not value)

special registers:
" unnamed register
0 yank register
1-9 history of changes and deletions
_d blackhole
+ clipboard (cut, copy, paste - OS specific)
* primary (middle mouse button - OS specific)
= expression register (usefull only in insert mode with <C-r>=
% name of the current file
# name of alternate file
. last inserted text
: last ex command
/ last search pattern


# Dot Command
It is like mini macros

Ex:
let a = 1
let b = 10
let c = 100000


# Visual Mode
Usually not necessary

Exceptions:
- Doing something in a few lines
let a = 1
let b = 10
let c = 100000

- Copy and replace
lead_id = 1
application_id = 2

Flub.new(application_id)
Flab.new(application_id)

warning: it causes side effect

Other options:
blackhole register: "_diw<Shift>p
yank register (preserves dot command): ciw<C-r>0<Esc>

- Restricting a command

let a = 1
let b = 10
let c = 100000


# Ex Commands
Format: :[range|current_line]{command}

- all normal commands: yank, delete, move, etc

- Example using normal mode to append something at the end of a line

:.+1,.+3norm A;
let a = 1
let b = 10
let c = 100000


# Global Commands
Ex commands with pattern
Format: :[range|all_lines]g/{pattern}/{command}

Examples:
- append missing ";" add the end of the lets:

:.+1,.+3g/[^;]$/norm A;
let a = 1
let b = 10;
let c = 100000

perform something between two patterns
:g/^startlist/+1,/^endlist/-1 sort

startlist
'grape'
'coconut'
'banana'
'strawberry'
'lemon'
endlist

startlist
'France'
'Brazil'
'Japan'
'Senegal'
'Australia'
endlist

Using append register to copy a series of lines

reset register a: qaq
:.+2,.+13g/has_one/d A

class ApplicationRepresenter
  has_one :requester
  attribute :purpose
  has_one :banco_pan_application
  has_one :discard
  has_many :documents
  has_one :scheduled_partner
end

global!, globalv or only v: do with the lines that
does not match the pattern


# Macros
recording a macro: q{register}{commands}q
executing a macro: @{register}
executing last macro: @@

parallel vs sequential

let a = 1
let b = 10
let c = 100000
let d = 100
let e = 10000000

how to edit a macro?

series of numbers

red
purple
cyan
blue
pink
green


# argdo, cfdo, cdo, bufdo etc


# More
- https://thoughtbot.com/upcase/the-art-of-vim
- https://thoughtbot.com/upcase/onramp-to-vim
- http://vimcasts.org/
